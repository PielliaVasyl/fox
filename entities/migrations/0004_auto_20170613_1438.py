# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-13 14:38
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('entities', '0003_auto_20170612_1705'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.AlterModelOptions(
            name='socials',
            options={'ordering': ('updated',)},
        ),
        migrations.RemoveField(
            model_name='socials',
            name='title',
        ),
        migrations.AlterField(
            model_name='abstractcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.CreateModel(
            name='EmployeesPage',
            fields=[
                ('abstractpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractPage')),
            ],
            bases=('entities.abstractpage',),
        ),
        migrations.CreateModel(
            name='EmployersPage',
            fields=[
                ('abstractpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractPage')),
            ],
            bases=('entities.abstractpage',),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('abstractpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractPage')),
                ('local_classes', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses')),
                ('locations', models.ManyToManyField(blank=True, to='entities.PlaceLocation')),
                ('types', models.ManyToManyField(blank=True, to='entities.PlaceType')),
            ],
            bases=('entities.abstractpage',),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='abstract_page_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.AbstractPageLink'),
        ),
        migrations.AddField(
            model_name='abstractpage',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='abstract_page_owners', to='entities.UserProfile'),
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.HallContacts')),
            ],
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.OrganizationContacts')),
            ],
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('employeespage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployeesPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PersonContacts')),
            ],
            bases=('entities.employeespage',),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ResourceContacts')),
            ],
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.SchoolContacts')),
            ],
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ShopContacts')),
            ],
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('employeespage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployeesPage')),
                ('contacts', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.TeacherContacts')),
                ('employers', models.ManyToManyField(blank=True, to='entities.EmployersPage')),
                ('local_classes', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses')),
            ],
            bases=('entities.employeespage',),
        ),
        migrations.AddField(
            model_name='shop',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='shop',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.ShopLocation'),
        ),
        migrations.AddField(
            model_name='shop',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.ShopType'),
        ),
        migrations.AddField(
            model_name='school',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='school',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='school',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.SchoolLocation'),
        ),
        migrations.AddField(
            model_name='person',
            name='employers',
            field=models.ManyToManyField(blank=True, to='entities.EmployersPage'),
        ),
        migrations.AddField(
            model_name='person',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='organization',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='organization',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='organization',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.OrganizationLocation'),
        ),
        migrations.AddField(
            model_name='hall',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='hall',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.HallLocation'),
        ),
    ]
