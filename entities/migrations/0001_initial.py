# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-09 15:55
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='AbstractEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('start_date', models.DateField(blank=True, default=datetime.date.today)),
                ('end_date', models.DateField(blank=True, default=datetime.date.today)),
                ('_status', models.CharField(blank=True, choices=[(None, 'Определяется автоматически'), ('DENIED', 'Отменено'), ('POSTPONED', 'Перенесено')], db_column='status', default=None, max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='AbstractLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
            },
        ),
        migrations.CreateModel(
            name='AbstractLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AbstractType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='EventLocalClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AbstractEventLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='AbstractGlobalClass',
            fields=[
                ('abstractclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractClass')),
            ],
            bases=('entities.abstractclass',),
        ),
        migrations.CreateModel(
            name='AbstractLocalClass',
            fields=[
                ('abstractclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractClass')),
            ],
            bases=('entities.abstractclass',),
        ),
        migrations.CreateModel(
            name='DayOfTheWeek',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(blank=True, choices=[('MON', 'Понедельник'), ('TUE', 'Вторник'), ('WED', 'Среда'), ('THU', 'Четверг'), ('FRI', 'Пятница'), ('SAT', 'Суббота'), ('SUN', 'Воскресенье')], max_length=3)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('abstractevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractEvent')),
            ],
            bases=('entities.abstractevent',),
        ),
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('FESTIVAL', 'Фестивать'), ('COMPETITION', 'Конкурс'), ('MASTERCLASS', 'Мастер-класс'), ('OPEN_AIR', 'Open air'), ('PARTY', 'Вечеринка'), ('GROUP_CLASSES', 'Групповые занятия'), ('OPEN_LESSON', 'Открытый урок')], default='MASTERCLASS', max_length=20)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='ExperienceLevel',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('NEW', 'Начинающий'), ('INM', 'Средний'), ('ADV', 'Опытный'), ('SHW', 'Шоу'), ('PRC', 'Практика')], default='NEW', max_length=3)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='PriceType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('PAID', 'Платно'), ('FREE', 'Бесплатно'), ('SHAREWARE', 'Условно-бесплатно'), ('FIRST_LESSON_FREE', 'Первое занятие бесплатно')], default='PAID', max_length=20)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='PromoAction',
            fields=[
                ('abstractevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractEvent')),
            ],
            bases=('entities.abstractevent',),
        ),
        migrations.CreateModel(
            name='RepeatsType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('ONCE', 'Один раз'), ('WEEKLY', 'Еженедельно')], default='ONCE', max_length=10)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.AddField(
            model_name='abstractlocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='abstract_event_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='local_classes',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.EventLocalClasses'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='abstract_event_owners', to='entities.UserProfile'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('abstractglobalclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractGlobalClass')),
            ],
            bases=('entities.abstractglobalclass',),
        ),
        migrations.CreateModel(
            name='DanceDirection',
            fields=[
                ('abstractlocalclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocalClass')),
            ],
            bases=('entities.abstractlocalclass',),
        ),
        migrations.CreateModel(
            name='DanceStyle',
            fields=[
                ('abstractlocalclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocalClass')),
                ('dance_direction', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceDirection')),
            ],
            bases=('entities.abstractlocalclass',),
        ),
        migrations.CreateModel(
            name='Direction',
            fields=[
                ('abstractglobalclass_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractGlobalClass')),
            ],
            bases=('entities.abstractglobalclass',),
        ),
        migrations.AddField(
            model_name='event',
            name='experience_levels',
            field=models.ManyToManyField(blank=True, to='entities.ExperienceLevel'),
        ),
        migrations.AddField(
            model_name='event',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.EventLocation'),
        ),
        migrations.AddField(
            model_name='event',
            name='price_types',
            field=models.ManyToManyField(blank=True, to='entities.PriceType'),
        ),
        migrations.AddField(
            model_name='event',
            name='repeats_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.RepeatsType'),
        ),
        migrations.AddField(
            model_name='event',
            name='schedule',
            field=models.ManyToManyField(blank=True, to='entities.DayOfTheWeek'),
        ),
        migrations.AddField(
            model_name='event',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.EventType'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.AbstractEventLink'),
        ),
        migrations.AddField(
            model_name='eventlocalclasses',
            name='dance_directions',
            field=models.ManyToManyField(to='entities.DanceDirection'),
        ),
        migrations.AddField(
            model_name='eventlocalclasses',
            name='dance_styles',
            field=models.ManyToManyField(to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='abstractlocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='abstractlocalclass',
            name='directions',
            field=models.ManyToManyField(to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='abstractevent',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
    ]
