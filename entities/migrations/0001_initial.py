# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-28 14:47
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('is_linked_article', models.BooleanField(default=False)),
                ('author_of_post', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AudioLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerServicesLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerServicesType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('BARBERSHOP', 'Парикмахерская'), ('ATELIER', 'Ателье')], default='BARBERSHOP', max_length=20)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceDirectionClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('author_of_post', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceStyleAuthorLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceStyleClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('dance_direction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceDirectionClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceStyleCountType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, choices=[('SOLO', 'Одиночный'), ('PARTNER', 'Парный'), ('GROUP', 'Групповой')], max_length=10)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DanceStyleDistanceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, choices=[('CLOSE', 'Близкая'), ('AVERAGE', 'Средняя'), ('DISTANT', 'Далекая')], max_length=10)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DayOfTheWeek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, choices=[('MON', 'Понедельник'), ('TUE', 'Вторник'), ('WED', 'Среда'), ('THU', 'Четверг'), ('FRI', 'Пятница'), ('SAT', 'Суббота'), ('SUN', 'Воскресенье')], max_length=3)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Direction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeesPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmployersPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('start_date', models.DateField(blank=True, default=datetime.date.today)),
                ('end_date', models.DateField(blank=True, default=datetime.date.today)),
                ('_status', models.CharField(blank=True, choices=[(None, 'Определяется автоматически'), ('DENIED', 'Отменено'), ('POSTPONED', 'Перенесено')], db_column='status', default=None, max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventLocalClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('dance_directions', models.ManyToManyField(to='entities.DanceDirectionClass')),
                ('dance_styles', models.ManyToManyField(to='entities.DanceStyleClass')),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('FESTIVAL', 'Фестивать'), ('COMPETITION', 'Конкурс'), ('MASTERCLASS', 'Мастер-класс'), ('OPEN_AIR', 'Open air'), ('PARTY', 'Вечеринка'), ('GROUP_CLASSES', 'Групповые занятия'), ('OPEN_LESSON', 'Открытый урок')], default='MASTERCLASS', max_length=20)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperienceLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('NEW', 'Начинающий'), ('INM', 'Средний'), ('ADV', 'Опытный'), ('SHW', 'Шоу'), ('PRC', 'Практика')], default='NEW', max_length=3)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HallContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HallLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HallLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HallMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocalTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageLocalClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('dance_directions', models.ManyToManyField(to='entities.DanceDirectionClass')),
                ('dance_styles', models.ManyToManyField(to='entities.DanceStyleClass')),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='PersonContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(message="Введите номер телефона в формате: '+380XXXXXXX'. Разрешено до 15 цифр.", regex='^\\+?1?\\d{9,15}$')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('OPEN_AIR', 'Open air')], default='OPEN_AIR', max_length=20)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaylistLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostGroupTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_all_directions', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_all_directions', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('PAID', 'Платно'), ('FREE', 'Бесплатно'), ('SHAREWARE', 'Условно-бесплатно'), ('FIRST_LESSON_FREE', 'Первое занятие бесплатно')], default='PAID', max_length=20)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromoAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('start_date', models.DateField(blank=True, default=datetime.date.today)),
                ('end_date', models.DateField(blank=True, default=datetime.date.today)),
                ('_status', models.CharField(blank=True, choices=[(None, 'Определяется автоматически'), ('DENIED', 'Отменено'), ('POSTPONED', 'Перенесено')], db_column='status', default=None, max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromoActionLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepeatsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('ONCE', 'Один раз'), ('WEEKLY', 'Еженедельно')], default='ONCE', max_length=10)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('SHOP', 'Магазин'), ('INTERNET_SHOP', 'Интернет-магазин')], default='SHOP', max_length=20)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialLinkFB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialLinkInstagram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialLinkTwitter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialLinkVK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Socials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='TeacherContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeacherLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tracklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('role', models.CharField(blank=True, max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos_author', to='entities.UserProfile')),
                ('contributors', models.ManyToManyField(blank=True, related_name='videos_contributor', to='entities.UserProfile')),
                ('directions', models.ManyToManyField(blank=True, to='entities.Direction')),
                ('groups', models.ManyToManyField(blank=True, to='entities.Playlist')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile')),
            ],
            options={
                'ordering': ('link',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlbumTag',
            fields=[
                ('postgrouptag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostGroupTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.postgrouptag',),
        ),
        migrations.CreateModel(
            name='ArticleTag',
            fields=[
                ('posttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.posttag',),
        ),
        migrations.CreateModel(
            name='AudioTag',
            fields=[
                ('posttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.posttag',),
        ),
        migrations.CreateModel(
            name='ChapterTag',
            fields=[
                ('postgrouptag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostGroupTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.postgrouptag',),
        ),
        migrations.CreateModel(
            name='CityTag',
            fields=[
                ('globaltag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.GlobalTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.globaltag',),
        ),
        migrations.CreateModel(
            name='CustomerServices',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_services_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='DanceTag',
            fields=[
                ('localtag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.LocalTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.localtag',),
        ),
        migrations.CreateModel(
            name='DirectionTag',
            fields=[
                ('globaltag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.GlobalTag')),
                ('direction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.Direction')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.globaltag',),
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='halls_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organizations_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('employeespage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployeesPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='persons_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employeespage',),
        ),
        migrations.CreateModel(
            name='PhotoTag',
            fields=[
                ('posttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.posttag',),
        ),
        migrations.CreateModel(
            name='PlaylistTag',
            fields=[
                ('postgrouptag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostGroupTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.postgrouptag',),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schools_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('employerspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployersPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shops_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employerspage',),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('employeespage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.EmployeesPage')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers_author', to='entities.UserProfile')),
            ],
            options={
                'ordering': ('updated',),
                'abstract': False,
            },
            bases=('entities.employeespage',),
        ),
        migrations.CreateModel(
            name='TracklistTag',
            fields=[
                ('postgrouptag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostGroupTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.postgrouptag',),
        ),
        migrations.CreateModel(
            name='VideoTag',
            fields=[
                ('posttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.PostTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.posttag',),
        ),
        migrations.AddField(
            model_name='video',
            name='link',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.VideoLink'),
        ),
        migrations.AddField(
            model_name='video',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='videos_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='tracklist',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='tracklist',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='tracklist_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='tracklist',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='tracklist',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='tracklist_owners', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='teacherlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='teachercontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='teachercontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='teachercontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='socials',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='socials',
            name='fb',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkFB'),
        ),
        migrations.AddField(
            model_name='socials',
            name='instagram',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkInstagram'),
        ),
        migrations.AddField(
            model_name='socials',
            name='twitter',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkTwitter'),
        ),
        migrations.AddField(
            model_name='socials',
            name='vk',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkVK'),
        ),
        migrations.AddField(
            model_name='sociallinkvk',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='sociallinktwitter',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='sociallinkinstagram',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='sociallinkfb',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shopmapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shoplocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shoplocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='shoplocation',
            name='coordinates',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ShopMapCoordinates'),
        ),
        migrations.AddField(
            model_name='shoplink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shopcontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shopcontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='shopcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='schoolmapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='schoollocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='schoollocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='schoollocation',
            name='coordinates',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.SchoolMapCoordinates'),
        ),
        migrations.AddField(
            model_name='schoollink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='schoolcontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='schoolcontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='schoolcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='resourcelink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='resourcecontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='resourcecontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='resourcecontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='promoactionlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promo_actions_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='promo_actions_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.PromoActionLink'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.EventLocalClasses'),
        ),
        migrations.AddField(
            model_name='promoaction',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='promo_actions_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='posttag',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='postgrouptag',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='playlistlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='playlist_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='link',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PlaylistLink'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='playlist_owners', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='placemapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='placelocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='placelocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='placelocation',
            name='coordinates',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PlaceMapCoordinates'),
        ),
        migrations.AddField(
            model_name='placelink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='place',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='place',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='place',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='places_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='place',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='place',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.PlaceLink'),
        ),
        migrations.AddField(
            model_name='place',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='place',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.PlaceLocation'),
        ),
        migrations.AddField(
            model_name='place',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='places_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='place',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.PlaceType'),
        ),
        migrations.AddField(
            model_name='photolink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='photo',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='photo',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='photos_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='photo',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='photo',
            name='groups',
            field=models.ManyToManyField(blank=True, to='entities.Album'),
        ),
        migrations.AddField(
            model_name='photo',
            name='link',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PhotoLink'),
        ),
        migrations.AddField(
            model_name='photo',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='photos_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='phonenumber',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='personlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='personcontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='personcontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='personcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='organizationmapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organizationlocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organizationlocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='organizationlocation',
            name='coordinates',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.OrganizationMapCoordinates'),
        ),
        migrations.AddField(
            model_name='organizationlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organizationcontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organizationcontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='organizationcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='hallmapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='halllocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='halllocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='halllocation',
            name='coordinates',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.HallMapCoordinates'),
        ),
        migrations.AddField(
            model_name='halllink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='hallcontacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='hallcontacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='hallcontacts',
            name='socials',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='eventlocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='eventlocation',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='eventlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='event',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='events_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='event',
            name='experience_levels',
            field=models.ManyToManyField(blank=True, to='entities.ExperienceLevel'),
        ),
        migrations.AddField(
            model_name='event',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.EventLink'),
        ),
        migrations.AddField(
            model_name='event',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.EventLocalClasses'),
        ),
        migrations.AddField(
            model_name='event',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.EventLocation'),
        ),
        migrations.AddField(
            model_name='event',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='events_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='price_types',
            field=models.ManyToManyField(blank=True, to='entities.PriceType'),
        ),
        migrations.AddField(
            model_name='event',
            name='repeats_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.RepeatsType'),
        ),
        migrations.AddField(
            model_name='event',
            name='schedule',
            field=models.ManyToManyField(blank=True, to='entities.DayOfTheWeek'),
        ),
        migrations.AddField(
            model_name='event',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.EventType'),
        ),
        migrations.AddField(
            model_name='employerspage',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='employerspage',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='employeespage',
            name='cities',
            field=models.ManyToManyField(blank=True, to='entities.City'),
        ),
        migrations.AddField(
            model_name='employeespage',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='dancestyleclass',
            name='directions',
            field=models.ManyToManyField(to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='dancestyleauthorlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dance_styles_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='dance_styles_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='count_types',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyleCountType'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='distance_types',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyleDistanceType'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='group',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceDirection'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='link_to_author',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStyleAuthorLink'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='dance_styles_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancedirectionclass',
            name='directions',
            field=models.ManyToManyField(to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='dancedirection',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancedirection',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='dance_direction_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancedirection',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='dancedirection',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='dance_direction_owners', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='customerserviceslink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='chapter_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='chapter_owners', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='audiolink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='audio',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audios_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='audio',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='audios_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='audio',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='audio',
            name='groups',
            field=models.ManyToManyField(blank=True, to='entities.Tracklist'),
        ),
        migrations.AddField(
            model_name='audio',
            name='link',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.AudioLink'),
        ),
        migrations.AddField(
            model_name='audio',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='audios_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='articlelink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles_author', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='article',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='articles_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='article',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='article',
            name='groups',
            field=models.ManyToManyField(blank=True, to='entities.Chapter'),
        ),
        migrations.AddField(
            model_name='article',
            name='link',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ArticleLink'),
        ),
        migrations.AddField(
            model_name='article',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='articles_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='album',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='album',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='album_contributors', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='album',
            name='directions',
            field=models.ManyToManyField(blank=True, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='album',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='album_owners', to='entities.UserProfile'),
        ),
        migrations.CreateModel(
            name='DanceDirectionTag',
            fields=[
                ('dancetag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.DanceTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.dancetag',),
        ),
        migrations.CreateModel(
            name='DanceStyleCountTag',
            fields=[
                ('dancetag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.DanceTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.dancetag',),
        ),
        migrations.CreateModel(
            name='DanceStyleDistanceTag',
            fields=[
                ('dancetag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.DanceTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.dancetag',),
        ),
        migrations.CreateModel(
            name='DanceStyleTag',
            fields=[
                ('dancetag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.DanceTag')),
            ],
            options={
                'ordering': ('title',),
                'abstract': False,
            },
            bases=('entities.dancetag',),
        ),
        migrations.AddField(
            model_name='video',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.VideoTag'),
        ),
        migrations.AddField(
            model_name='tracklist',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.TracklistTag'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.TeacherContacts'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='teachers_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='employers',
            field=models.ManyToManyField(blank=True, to='entities.EmployersPage'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.TeacherLink'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='teachers_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shop',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ShopContacts'),
        ),
        migrations.AddField(
            model_name='shop',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='shops_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shop',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='shop',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.ShopLink'),
        ),
        migrations.AddField(
            model_name='shop',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.ShopLocation'),
        ),
        migrations.AddField(
            model_name='shop',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='shops_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='shop',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.ShopType'),
        ),
        migrations.AddField(
            model_name='school',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.SchoolContacts'),
        ),
        migrations.AddField(
            model_name='school',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='schools_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='school',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='school',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.SchoolLink'),
        ),
        migrations.AddField(
            model_name='school',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='school',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.SchoolLocation'),
        ),
        migrations.AddField(
            model_name='school',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='schools_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='resource',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ResourceContacts'),
        ),
        migrations.AddField(
            model_name='resource',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='resources_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='resource',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.ResourceLink'),
        ),
        migrations.AddField(
            model_name='resource',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='resources_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.PlaylistTag'),
        ),
        migrations.AddField(
            model_name='photo',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.PhotoTag'),
        ),
        migrations.AddField(
            model_name='person',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PersonContacts'),
        ),
        migrations.AddField(
            model_name='person',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='persons_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='person',
            name='employers',
            field=models.ManyToManyField(blank=True, to='entities.EmployersPage'),
        ),
        migrations.AddField(
            model_name='person',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.PersonLink'),
        ),
        migrations.AddField(
            model_name='person',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='person',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='persons_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organization',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.OrganizationContacts'),
        ),
        migrations.AddField(
            model_name='organization',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='organizations_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='organization',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='organization',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.OrganizationLink'),
        ),
        migrations.AddField(
            model_name='organization',
            name='local_classes',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.PageLocalClasses'),
        ),
        migrations.AddField(
            model_name='organization',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.OrganizationLocation'),
        ),
        migrations.AddField(
            model_name='organization',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='organizations_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='hall',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.HallContacts'),
        ),
        migrations.AddField(
            model_name='hall',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='halls_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='hall',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='hall',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.HallLink'),
        ),
        migrations.AddField(
            model_name='hall',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.HallLocation'),
        ),
        migrations.AddField(
            model_name='hall',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='halls_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancetag',
            name='direction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.Direction'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='contacts',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.ShopContacts'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='contributors',
            field=models.ManyToManyField(blank=True, related_name='customer_services_contributor', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='employees',
            field=models.ManyToManyField(blank=True, to='entities.EmployeesPage'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.CustomerServicesLink'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.ShopLocation'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name='customer_services_owner', to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='customerservices',
            name='types',
            field=models.ManyToManyField(blank=True, to='entities.CustomerServicesType'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.ChapterTag'),
        ),
        migrations.AddField(
            model_name='audio',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.AudioTag'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.ArticleTag'),
        ),
        migrations.AddField(
            model_name='album',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.AlbumTag'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyleTag'),
        ),
        migrations.AddField(
            model_name='dancedirection',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.DanceDirectionTag'),
        ),
    ]
